// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Token {
  id        String   @id @default(uuid())
  network   Int
  name      String
  address   String
  symbol    String
  logo      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Waitlist {
  id               String             @id @default(uuid())
  name             String
  contractAddress  String?
  symbol           String?
  tokenHolders     TokenHolder[]
  mainWaitlist     Boolean            @default(true)
  parentWaitlist   String?
  twitter          String?
  twitterFollowers Int?
  discord          String?
  discordMembers   Int?
  size             Int?
  logo             String?
  bluechipHolders  Int?
  whales           Int?
  bots             Int?
  TargetingHolders TargetingHolders[]
}

model WaitlistStatistics {
  id              String @id @default(uuid())
  totalBalance    Int
  totalUsdBalance Int
  popularTokens   Json
}

model TokenHolder {
  id                   String             @id @default(uuid())
  address              String
  totalBalanceUsd      Float
  totalBalanceTokens   Float
  lastUpdate           DateTime           @default(now())
  firstTransactionDate DateTime
  ethBalance           Float
  volume               Float
  processedTokens      Boolean            @default(false)
  processedBalance     Boolean            @default(false)
  processedTokensFail  Boolean            @default(false)
  processedBalanceFail Boolean            @default(false)
  waitlist             Waitlist           @relation(fields: [waitlistId], references: [id])
  waitlistId           String
  tokens               TokenTransfer[]
  twitter              String?
  twitterInteractions  Int?
  discord              String?
  discordMessages      Int?
  chainType            ChainType          @default(UNKNOWN)
  forTargeting         Boolean            @default(false)
  TargetingHolders     TargetingHolders[]
}

model TokenTransfer {
  id                      String                  @id @default(uuid())
  address                 String
  tokenId                 BigInt
  amount                  Float
  symbol                  String
  name                    String
  contractType            TokenType
  metadata                String?
  holder                  TokenHolder             @relation(fields: [holderId], references: [id])
  holderId                String
  waitlistId              String
  logo                    String?
  transferProcessedStatus TransferProcessedStatus
  totalSupply             Int?
}

model TargetingHolders {
  id         String      @id @default(uuid())
  holder     TokenHolder @relation(fields: [holderId], references: [id])
  holderId   String
  waitlist   Waitlist    @relation(fields: [waitlistId], references: [id])
  waitlistId String
  vector     Int
}

enum TransferProcessedStatus {
  STORED
  PROCESSED
}

enum TokenType {
  ERC20
  ERC223
  ERC721
  ERC827
  ERC1155
  UNKOWN
}

enum ChainType {
  ETHEREUM
  POLYGON
  SOLANA
  UNKNOWN
}

enum TransactionType {
  BUY
  SALE
  MINT
  BURN
  TRANSFER
  CANCEL_LIST
}
